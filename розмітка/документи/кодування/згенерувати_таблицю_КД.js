const fs = require("node:fs");

function getIcon(symbol) {
    const icon = fs.readFileSync(`./іконки/${symbol}.svg`, "utf-8");
    return `<div style="height: 14px; width: 14px; display: flex; align-items: center;">${icon.replaceAll('\n', '')}</div>`;
}

const charDefinitions = [
    ['\n', "Міжряд"],
    [' ', "Пропуск"],
    ['+', "Хрестик", getIcon('+')],
    ['-', "Риска", getIcon('-')],

    ['*', "Зірочка", getIcon('*')],
    ['/', "Похила", getIcon('КОСА')],
    ['(', "Відкрита дужка", getIcon('(')],
    [')', "Закрита дужка", getIcon(')')],

    ['<', "Менше", getIcon('<')],
    ['>', "Більше", getIcon('>')],
    ['∧', "Вище", getIcon('∧')],
    ['∨', "Нижче", getIcon('∨')],
    ['¬', "Гачок", getIcon('¬')],
    ['⊕', "Хрестик в кругу", getIcon('⊕')],
    ['%', "Відсоток", getIcon('%')],
    ['=', "Двориска", getIcon('=')],

    ['0', "Нуль", getIcon('0')],
    ['1', "Один", getIcon('1')],
    ['2', "Два", getIcon('2')],
    ['3', "Три", getIcon('3')],
    ['4', "Чотири", getIcon('4')],
    ['5', "Пʼять", getIcon('5')],
    ['6', "Шість", getIcon('6')],
    ['7', "Сім", getIcon('7')],
    ['8', "Вісім", getIcon('8')],
    ['9', "Девʼять", getIcon('9')],
    [',', "Кома", getIcon(',')],
    ['.', "Крапка", getIcon('.')],
    ['"', "Дволапка", getIcon('"')],
    ['?', "Питання", getIcon('?')],
    ['!', "Оклик", getIcon('!')],
    ['ʼ', "Твердий", getIcon('ʼ')],

    ['А', "Велика буква \"А\"", getIcon('А')],
    ['Б', "Велика буква \"Б\"", getIcon('Б')],
    ['В', "Велика буква \"В\"", getIcon('В')],
    ['Г', "Велика буква \"Г\"", getIcon('Г')],
    ['Д', "Велика буква \"Д\"", getIcon('Д')],
    ['Е', "Велика буква \"Е\"", getIcon('Е')],
    ['Є', "Велика буква \"Є\"", getIcon('Є')],
    ['Ж', "Велика буква \"Ж\"", getIcon('Ж')],
    ['З', "Велика буква \"З\"", getIcon('З')],
    ['И', "Велика буква \"И\"", getIcon('И')],
    ['І', "Велика буква \"І\"", getIcon('І')],
    ['Ї', "Велика буква \"Ї\"", getIcon('Ї')],
    ['Й', "Велика буква \"Й\"", getIcon('Й')],
    ['К', "Велика буква \"К\"", getIcon('К')],
    ['Л', "Велика буква \"Л\"", getIcon('Л')],
    ['М', "Велика буква \"М\"", getIcon('М')],
    ['Н', "Велика буква \"Н\"", getIcon('Н')],
    ['О', "Велика буква \"О\"", getIcon('О')],
    ['П', "Велика буква \"П\"", getIcon('П')],
    ['Р', "Велика буква \"Р\"", getIcon('Р')],
    ['С', "Велика буква \"С\"", getIcon('С')],
    ['Т', "Велика буква \"Т\"", getIcon('Т')],
    ['У', "Велика буква \"У\"", getIcon('У')],
    ['Ф', "Велика буква \"Ф\"", getIcon('Ф')],
    ['Х', "Велика буква \"Х\"", getIcon('Х')],
    ['Ц', "Велика буква \"Ц\"", getIcon('Ц')],
    ['Ч', "Велика буква \"Ч\"", getIcon('Ч')],
    ['Ш', "Велика буква \"Ш\"", getIcon('Ш')],
    ['Щ', "Велика буква \"Щ\"", getIcon('Щ')],
    ['Ь', "Велика буква \"Ь\"", getIcon('Ь')],
    ['Ю', "Велика буква \"Ю\"", getIcon('Ю')],
    ['Я', "Велика буква \"Я\"", getIcon('Я')],

    ['а', "Мала буква \"а\"", getIcon('а')],
    ['б', "Мала буква \"б\"", getIcon('б')],
    ['в', "Мала буква \"в\"", getIcon('в')],
    ['г', "Мала буква \"г\"", getIcon('г')],
    ['д', "Мала буква \"д\"", getIcon('д')],
    ['е', "Мала буква \"е\"", getIcon('е')],
    ['є', "Мала буква \"є\"", getIcon('є')],
    ['ж', "Мала буква \"ж\"", getIcon('ж')],
    ['з', "Мала буква \"з\"", getIcon('з')],
    ['и', "Мала буква \"и\"", getIcon('и')],
    ['і', "Мала буква \"і\"", getIcon('і')],
    ['ї', "Мала буква \"ї\"", getIcon('ї')],
    ['й', "Мала буква \"й\"", getIcon('й')],
    ['к', "Мала буква \"к\"", getIcon('к')],
    ['л', "Мала буква \"л\"", getIcon('л')],
    ['м', "Мала буква \"м\"", getIcon('м')],
    ['н', "Мала буква \"н\"", getIcon('н')],
    ['о', "Мала буква \"о\"", getIcon('о')],
    ['п', "Мала буква \"п\"", getIcon('п')],
    ['р', "Мала буква \"р\"", getIcon('р')],
    ['с', "Мала буква \"с\"", getIcon('с')],
    ['т', "Мала буква \"т\"", getIcon('т')],
    ['у', "Мала буква \"у\"", getIcon('у')],
    ['ф', "Мала буква \"ф\"", getIcon('ф')],
    ['х', "Мала буква \"х\"", getIcon('х')],
    ['ц', "Мала буква \"ц\"", getIcon('ц')],
    ['ч', "Мала буква \"ч\"", getIcon('ч')],
    ['ш', "Мала буква \"ш\"", getIcon('ш')],
    ['щ', "Мала буква \"щ\"", getIcon('щ')],
    ['ь', "Мала буква \"ь\"", getIcon('ь')],
    ['ю', "Мала буква \"ю\"", getIcon('ю')],
    ['я', "Мала буква \"я\"", getIcon('я')],

    ['Ґ', "Велика буква \"Ґ\"", getIcon('Ґ')],
    ['Ё', "Велика буква \"Ё\"", getIcon('Ё')],
    ['Ъ', "Велика буква \"Ъ\"", getIcon('Ъ')],
    ['Ы', "Велика буква \"Ы\"", getIcon('Ы')],
    ['Э', "Велика буква \"Э\"", getIcon('Э')],
    ['ґ', "Мала буква \"ґ\"", getIcon('ґ')],
    ['ё', "Мала буква \"ё\"", getIcon('ё')],
    ['ъ', "Мала буква \"ъ\"", getIcon('ъ')],
    ['ы', "Мала буква \"ы\"", getIcon('ы')],
    ['э', "Мала буква \"э\"", getIcon('э')],
    ['\'', "Лапка", getIcon('\'')],
    ['`', "Косолапка", getIcon('`')],
    ['·', "Міжкрапка", getIcon('·')],
    [':', "Двокрапка", getIcon(':')],
    [';', "Крапкакома", getIcon(';')],
    ['~', "Хвиляста", getIcon('~')],
    ['_', "Підриска", getIcon('_')],
    ['|', "Стояча", getIcon('|')],
    ['\\', "Обернена похила", getIcon('ОБЕРКОСА')],
    ['{', "Відкрита фігурна дужка", getIcon('{')],
    ['}', "Закрита фігурна дужка", getIcon('}')],
    ['[', "Відкрита квадратна дужка", getIcon('[')],
    [']', "Закрита квадратна дужка", getIcon(']')],
    ['#', "Мітка", getIcon('#')],
    ['@', "Адреса", getIcon('@')],
    ['&', "І", getIcon('&')],
    ['₴', "Гривня", getIcon('₴')],
    ['§', "Секція", getIcon('§')],
    ['∞', "Нескінченність", getIcon('∞')],
    ['\0',  ""],
    ['\0',  ""],
    ['\x7f', "Дія", `<div style="display: flex; align-items: center">${getIcon('ДІЯ_1')}</div>`],
];

const textEncoder = new TextEncoder();

const lines = charDefinitions.map(([char, definition, logo], index) => {
    const columns = [];
    // columns.push(definition);
    if (logo) {
        columns.push(logo);
    } else if (char) {
        if (char.charCodeAt(0) > 32) {
            columns.push(char[0].replaceAll('\n', '').replaceAll('\\', '\\\\').replaceAll('>', '\\>').replaceAll('<', '\\<').replaceAll('[', '\\[').replaceAll('|', '\\|'));
        } else {
            columns.push(definition);
        }
    } else {
        columns.push('');
    }
    columns.push(String(index));
    columns.push(`<small>0ш</small>${index.toString(16).toUpperCase().replaceAll('A', 'А').replaceAll('B', 'Б').replaceAll('C', 'В').replaceAll('D', 'Г').replaceAll('E', 'Д').replaceAll('F', 'Е')}`);
    columns.push(`<small>0д</small>${index.toString(2)}`);
    if (char) {
        let value = String(char.charCodeAt(0));
        const encoded = textEncoder.encode(char[0]);
        if (encoded.length > 1) {
            value = `${value} <small>\\[${encoded.map((c) => c).join(', ')}]</small>`;
        }
        columns.push(`${char && char.charCodeAt(0) > 32 && char[0] !== ' ' && char[0] !== '\n' ? '<code>' + char[0].replaceAll('\n', '').replaceAll('\\', '\\\\').replaceAll('>', '\\>').replaceAll('<', '\\<').replaceAll('[', '\\[').replaceAll('|', '\\|') + '</code> = ' : ''}${value}`);
    } else {
        columns.push('');
    }
    return `|${columns.join(' | ')}|`;
});

const table = lines.join('\n');

fs.writeFileSync('символи.ю8', charDefinitions.map(([char, definition], index) => {
    const encoded = textEncoder.encode(char[0]);
    const name = definition.replaceAll(' ', '_').replaceAll('\"', '');
    const lines = [];
    lines.push(`стала ${name} = ${index};`);
    return lines.join('\n');
}).join('\n'));

fs.writeFileSync('відповідні_символи_юнікоду.ю8', charDefinitions.map(([char, definition], index) => {
    const encoded = textEncoder.encode(char[0]);
    const name = definition.replaceAll(' ', '_').replaceAll('\"', '');
    const lines = [];
    lines.push(`стала ${name} = ${char.charCodeAt(0)};`);
    return lines.join('\n');
}).join('\n'));

fs.writeFileSync('отримати_символ_ю8_з_т32.ю8', charDefinitions.map(([char, definition], index) => {
    const encoded = textEncoder.encode(char[0]);
    const name = definition.replaceAll(' ', '_').replaceAll('\"', '');
    const lines = [];
    lines.push(`якщо символ_КД == символи::${name} {`);
    if (encoded.length === 1) {
        lines.push(`  вихід_першого_байта::вміст = відповідні_символи_юнікоду::${name};`);
        lines.push(`  вихід_розміру::вміст = 1;`);
        lines.push(`  вернути так;`);
    }
    if (encoded.length === 2) {
        lines.push(`  вихід_першого_байта::вміст = п8(п32(192) | (п32(відповідні_символи_юнікоду::${name}) >> 6));`);
        lines.push(`  вихід_другого_байта::вміст = п8(п32(128) | (п32(відповідні_символи_юнікоду::${name}) & 63));`);
        lines.push(`  вихід_розміру::вміст = 2;`);
        lines.push(`  вернути так;`);
    }
    if (encoded.length === 3) {
        lines.push(`  вихід_першого_байта::вміст = п8(п32(224) | (п32(відповідні_символи_юнікоду::${name}) >> 12));`);
        lines.push(`  вихід_другого_байта::вміст = п8(п32(128) | ((п32(відповідні_символи_юнікоду::${name}) >> 6) & 63));`);
        lines.push(`  вихід_третього_байта::вміст = п8(п32(128) | (п32(відповідні_символи_юнікоду::${name}) & 63));`);
        lines.push(`  вихід_розміру::вміст = 3;`);
        lines.push(`  вернути так;`);
    }
    lines.push(`}`);
    return lines.join('\n');
}).join('\n'));

fs.writeFileSync('отримати_символ_т8_з_ю32.ю8', charDefinitions.map(([char, definition], index) => {
    const name = definition.replaceAll(' ', '_').replaceAll('\"', '');
    const lines = [];
    lines.push(`якщо символ_Ю32 == відповідні_символи_юнікоду::${name} {`);
    lines.push(`  вихід_першого_байта::вміст = символи::${name};`);
    lines.push(`  вихід_розміру::вміст = 1;`);
    lines.push(`  вернути так;`);
    lines.push(`}`);
    return lines.join('\n');
}).join('\n'));

console.log(`# Кодування Д

Новий варіант **Кодування Д**. Хочеться, щоб більше не було ідей як його переробити після встановлення як основного.

Дуже непросно ліпити докупи щось без доброї основи. ASCII створювався еволюційним шляхом і в умовах конкуренції.

В цьому варіанті за основу я спробував взяти кількість інформації яку можна зберігати певною кількістю бітів.
Також ця система розбита на 4 рядки по 32 знаки в кожному. 

| Символ| Код | 0ш                  | 0д                       | Unicode                                               |
||-----|---------------------|--------------------------|-------------------------------------------------------|
${table}
`);

// const charset = charDefinitions.map(([char]) => char[0]).filter((char) => char && char !== '\n').join('');
// console.log(charset);